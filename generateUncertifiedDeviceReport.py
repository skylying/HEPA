
import argparse
import csv
import collections
import datetime

def generateMatchedCsv(matched_agent):
    if len(matched_agent) > 0: 
        od = collections.OrderedDict(sorted(matched_agent.items()))
        now = datetime.datetime.now()
        filename = 'output_' + str(now.year) + '_' + str(now.month) + '_' + str(now.day) + '.csv'
        f = open(filename, 'w+')
        fieldnames = ['agent', 'device_type', 'count']
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        for agent in od:
            deviceList = od[agent]
            for device in deviceList:
                writer.writerow({'agent': agent, 'device_type': device['device_type'], 'count': device['count']})
        f.close()
    else:
        print("No matched agent found!")
        return


def parseAgentListByPartner(partner_project_list_csv):
    partnerAgentList = []
    count = 1
    with open(partner_project_list_csv) as partner_agent_csv:
        csv_reader = csv.reader(partner_agent_csv, delimiter=',')
        for row in csv_reader:
            if len(row) >= 1:
                partnerAgentList.append(row[0].strip())
                #print(row[0].strip() + 'line = ' + str(count))
                count += 1
    #print(len(partnerAgentList))
    return partnerAgentList


def parseUncerifyReport(uncertified_device_type_csv):

    uncertifiedAgentDeviceList = {};
    with open(uncertified_device_type_csv) as uncertified_device_csv:
        csv_reader = csv.reader(uncertified_device_csv, delimiter=',')
        # row[0] = Agent ID
        # row[1] = Device ID
        # row[3] = Count
        line_count = 0
        for row in csv_reader:
            if line_count == 0:
                line_count += 1
            else: 
                ##if int(row[3]) > 20000:
                if row[0] not in uncertifiedAgentDeviceList:
                    uncertifiedAgentDeviceList[row[0]] = []

                uncertifiedAgentDeviceList[row[0]].append({
                    'device_type': row[1],
                    'count': row[3]
                })
                #print('Agent ID = ' + row[0] + ' Device ID = ' + row[1] + ' Count = ' + row[3])
            line_count += 1
    return uncertifiedAgentDeviceList



def main(uncertified_device_type_csv, partner_project_list_csv):
    uncertifiedAgentDeviceList = parseUncerifyReport(uncertified_device_type_csv)
    partnerAgentList = parseAgentListByPartner(partner_project_list_csv)
    #print(uncertifiedAgentDeviceList)
    # Start to compare partner agent and uncertified agent
    matched_agent = {}
    for agent in partnerAgentList:
        if agent in uncertifiedAgentDeviceList and agent not in matched_agent:
            matched_agent[agent] = uncertifiedAgentDeviceList[agent];
    generateMatchedCsv(matched_agent)



if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        'uncertified_device_type_csv',
        help='Generated by Eric Chou weekly, in csv format https://dashboards.corp.google.com/edit/_b65d615f_af0c_4539_87c0_aed74ee1d9bc')
    parser.add_argument(
        'partner_project_list_csv',
        help='Project list by partner, in csv format')

    args = parser.parse_args()

    main(args.uncertified_device_type_csv, args.partner_project_list_csv)